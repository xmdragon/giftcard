# docker-compose.yml
services:
  # MySQL数据库
  mysql:
    image: mysql:8.0
    container_name: gift_card_mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: GiftCard_Root_2024!
      MYSQL_DATABASE: gift_card_system
      MYSQL_USER: giftcard_user
      MYSQL_PASSWORD: GiftCard_User_2024!
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - gift_card_network
    command: --default-authentication-plugin=mysql_native_password --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci --init-connect="SET NAMES utf8mb4"

  # Node.js应用 (已修改为绑定挂载)
  app:
    build: .
    container_name: gift_card_app
    restart: unless-stopped
    expose:
      - "3000"
    environment:
      NODE_ENV: production # 注意：开发时可能需要改为 development
      DB_HOST: mysql
      DB_USER: giftcard_user
      DB_PASSWORD: GiftCard_User_2024!
      DB_NAME: gift_card_system
      JWT_SECRET: GiftCard_JWT_Secret_Key_2024_Super_Complex_String
      PORT: 3000
      LANG: zh_CN.UTF-8
      LC_ALL: zh_CN.UTF-8
    depends_on:
      - mysql
    networks:
      - gift_card_network
    # --- 关键修改部分 ---
    volumes:
      # 1. 将本地的当前整个项目目录 (.) 挂载到容器的工作目录 (/app)
      #    这样一来，你在本地对代码的任何修改都会实时同步到容器中。
      #    假设你的 Dockerfile 中设置了 `WORKDIR /app`。
      - .:/app
      
      # 2. [重要!] 创建一个匿名卷来隔离 node_modules 目录。
      #    这可以防止本地的 node_modules (可能不存在或与容器环境不兼容) 覆盖掉
      #    在 Docker 镜像构建过程中 (RUN npm install) 生成的 node_modules 目录。
      #    这是 Node.js + Docker 绑定挂载的最佳实践。
      - /app/node_modules
    # --- 修改结束 ---
    healthcheck:
      test: ["CMD", "node", "healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis (可选，用于会话存储和缓存)
  redis:
    image: redis:7-alpine
    container_name: gift_card_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    networks:
      - gift_card_network
    volumes:
      - redis_data:/data
      
  # Nginx 反向代理
  nginx:
    image: nginx:1.25-alpine
    container_name: gift_card_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
      - "3000:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./public:/public:ro
      - nginx_cache:/var/cache/nginx
      - nginx_logs:/var/log/nginx
    depends_on:
      - app
    networks:
      - gift_card_network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local
  nginx_cache:
    driver: local
  nginx_logs:
    driver: local

networks:
  gift_card_network:
    driver: bridge
