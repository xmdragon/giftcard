# docker-compose.yml
services:
  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: gift_card_mysql
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    environment:
      MYSQL_ROOT_PASSWORD: GiftCard_Root_2024!
      MYSQL_DATABASE: gift_card_system
      MYSQL_USER: giftcard_user
      MYSQL_PASSWORD: GiftCard_User_2024!
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - gift_card_network
    command: --default-authentication-plugin=mysql_native_password --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci --init-connect="SET NAMES utf8mb4"

  # Node.js Application (modified for bind mount)
  app:
    build: .
    container_name: gift_card_app
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    expose:
      - "3000"
    environment:
      NODE_ENV: production # Note: may need to change to development during development
      DB_HOST: mysql
      DB_USER: giftcard_user
      DB_PASSWORD: GiftCard_User_2024!
      DB_NAME: gift_card_system
      JWT_SECRET: GiftCard_JWT_Secret_Key_2024_Super_Complex_String
      PORT: 3000
      LANG: zh_CN.UTF-8
      LC_ALL: zh_CN.UTF-8
    depends_on:
      - mysql
    networks:
      - gift_card_network
    # --- Key modification section ---
    volumes:
      # 1. Mount the current project directory (.) to the container's working directory (/app)
      #    This way, any modifications you make locally will be synchronized to the container in real-time.
      #    Assuming your Dockerfile sets `WORKDIR /app`.
      - .:/app
      
      # 2. [Important!] Create an anonymous volume to isolate the node_modules directory.
      #    This prevents local node_modules (which may not exist or be incompatible with container environment) from overriding
      #    the node_modules directory generated during Docker image build (RUN npm install).
      #    This is the best practice for Node.js + Docker bind mount.
      - /app/node_modules
    # --- End of modifications ---
    healthcheck:
      test: ["CMD", "node", "healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx Reverse Proxy
  nginx:
    image: nginx:1.25-alpine
    container_name: gift_card_nginx
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./public:/public:ro
      - nginx_cache:/var/cache/nginx
      - nginx_logs:/var/log/nginx
    depends_on:
      - app
    networks:
      - gift_card_network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  mysql_data:
    driver: local
  nginx_cache:
    driver: local
  nginx_logs:
    driver: local

networks:
  gift_card_network:
    driver: bridge
